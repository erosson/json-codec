// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gen Distortion 1`] = `
"import * as D from "./src/decode";

type DistortionID = string;

interface Distortion {
    slug: DistortionID;
    emoji: Array<string>;
    labelKey: string;
    descriptionKey: string;
}

const decodeDistortionID: D.Decoder<DistortionID> = D.string;
const decodeDistortion: D.Decoder<Distortion> = D.combine({
    slug: decodeDistortionID,
    emoji: D.string.array(),
    labelKey: D.string,
    descriptionKey: D.string,
    }, true);
"
`;

exports[`gen DistortionID 1`] = `
"import * as D from "./src/decode";

type DistortionID = string;

const decodeDistortionID: D.Decoder<DistortionID> = D.string;
"
`;

exports[`gen Thought 1`] = `
"import * as D from "./src/decode";

type DistortionID = string;

interface Distortion {
    slug: DistortionID;
    emoji: Array<string>;
    labelKey: string;
    descriptionKey: string;
}

type ThoughtID = string;

interface Thought {
    automaticThought: string;
    cognitiveDistoritions: Array<DistortionID>;
    challenge: string;
    alternativeThought: string;
    createdAt: string;
    updatedAt: string;
    uuid: ThoughtID;
}

const decodeDistortionID: D.Decoder<DistortionID> = D.string;
const decodeDistortion: D.Decoder<Distortion> = D.combine({
    slug: decodeDistortionID,
    emoji: D.string.array(),
    labelKey: D.string,
    descriptionKey: D.string,
    }, true);
const decodeThoughtID: D.Decoder<ThoughtID> = D.string;
const decodeThought: D.Decoder<Thought> = D.combine({
    automaticThought: D.string,
    cognitiveDistoritions: decodeDistortionID.array(),
    challenge: D.string,
    alternativeThought: D.string,
    createdAt: D.string,
    updatedAt: D.string,
    uuid: decodeThoughtID,
    }, true);
"
`;

exports[`gen ThoughtID 1`] = `
"import * as D from "./src/decode";

type ThoughtID = string;

const decodeThoughtID: D.Decoder<ThoughtID> = D.string;
"
`;
